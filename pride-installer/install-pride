#!/usr/bin/env bash -e

die() {
	echo ${@} >&2
	exit 1
}
which gradle > /dev/null || die "Please install Gradle first"

dir=`mktemp -d -t pride-installer-XXXX`
cd ${dir}
installer=${dir}/install-gradle

cat > ${installer} << 'EOF'
defaultTasks "install"
group = "com.prezi.pride"

repositories {
	mavenCentral()
}

configurations.all {
	resolutionStrategy {
		// Make sure we always get the newest version
		cacheDynamicVersionsFor 0, 'seconds'
	}
}

configurations {
	pride
}

dependencies {
	pride group: "com.prezi.pride", name: "pride", version: "+", classifier: "dist", ext: "zip"
}

def userHome = System.properties['user.home']
def installDir = file("${userHome}/.pride/versions")
def getPrideVersion() {
	return configurations.pride.resolvedConfiguration.firstLevelModuleDependencies.find { it.moduleName == "pride"}.moduleVersion
}

task copy(type: Copy) {
	dependsOn configurations.pride
	from { zipTree(configurations.pride.singleFile) }
	into installDir
}

def configFile = file("${System.getProperty("user.home")}/.prideconfig")
task setup() {
	outputs.file configFile
	doLast {
		if (!configFile.exists()) {
			configFile.parentFile.mkdirs()
			configFile.createNewFile()
		}
	}
}

task installUnix {
	dependsOn copy

	def executableLink = file("/usr/local/bin/pride")

	doLast {
		def prideVersion = getPrideVersion()
		println "Pride version: ${prideVersion}"
		ant.symlink(resource: "${installDir}/pride-${prideVersion}/bin/pride", link: executableLink, overwrite: true)
		println "Created ${executableLink}"
	}
}

task installOther {
	dependsOn copy
	doLast {
		def prideVersion = getPrideVersion()
		if (!Os.isFamily(Os.FAMILY_UNIX)) {
			println "Please add \"${installDir}/pride-${prideVersion}/bin\" to the PATH manually"
		}
	}
}

import org.apache.tools.ant.taskdefs.condition.Os

task install {
	dependsOn setup
	if (Os.isFamily(Os.FAMILY_UNIX)) {
		dependsOn installUnix
	} else {
		dependsOn installOther
	}
	doLast {
		def prideVersion = getPrideVersion()
		println "Successfully installed Pride version ${prideVersion}"
	}
}

task update {
	dependsOn install
}
task upgrade {
	dependsOn install
}
EOF

gradle -b ${installer}

rm -rf ${dir}
